
var Proteus     = require('proteus'),
    astUtil     = require('infuse/ast/util'),
    resolve     = require('infuse/resolve'),
    FS          = require('fs'),
    toNode      = astUtil.toNode,
    toValue     = astUtil.toValue,
    isArray     = Array.isArray,
    pathMap     = {},
    infused     = [],
    URL_REGEX   = /^https?:\/\//,
    options,
    infusion,
    Infuser
;

/**
 * Create a Module infusion
 * @returns {Number} the id of the infused item
 */
function infuseModule (name) {
    var id, filepath;
    
    if (~(id = pathMap[name])) {
        return id;
    }
    
    filepath = resolve(Infuser.directory, name, options.nodePaths);
    
    id = infused.length;
    pathMap[name] = id;
    infused.push({
        id: id,
        ast: Infuser.run(filepath)
    });
    
    return id;
}
/**
 * Create a Url infusion
 * @returns {Number} the id of the infused item
 */
function infuseUrl (name) {
    var id;
    
    if (~(id = pathMap[name])) {
        return id;
    }
    
    id = infused.length;
    infused.push({
        id: id,
        url: name
    });
    
    return id;
}

/**
 * Determine whether to infuse as a url or a local module
 * @returns {Number} the id of the infused item
 */
function infuseRequire (name) {
    if (URL_REGEX.test(name)) {
        return infuseUrl(name);
    }
    else {
        return infuseModule(name);
    }
}

function onComplete () {
    
}

/**
 * @param {Object} opts options object
 */
function requires (opts) {
    options = opts || {};
    return infusion;
}

infusion = {
    'call.callee > id[name="require"]': function (node, infuser) {
        var nodeArgs = node.arguments,
            isList = nodeArgs.length && nodeArgs[0].type === "ArrayExpression",
            params = isList ? nodeArgs[0] : nodeArgs
        ;
        
        if (!Infuser) {
            Infuser = infuser;
            Infuser.once('complete', onComplete);
        }
        
        params.forEach(function (param, idx) {
            switch (param.type) {
                case 'Literal':
                    param.update('value', infuseRequire(param.value));
                    break;
                case 'Identifier':
                    // TODO: Figure out scope and use that as the require
                    break;
            }
        });
    }
};

module.exports = Proteus.merge(requires, {
    infuseRequire:  infuseRequire,
    infuseUrl:      infuseUrl,
    infuseModule:   infuseModule,
    onComplete:     onComplete
});

Object.defineProperties(requires, {
    Infuser: {
        get: function () {
            return Infuser;
        },
        set: function (val) {
            Infuser = val;
        },
        enumerable: true
    },
    infusions: {
        get: function () {
            return infused;
        },
        enumerable: true
    }
});
