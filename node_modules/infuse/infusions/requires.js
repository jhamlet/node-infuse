
var Infusion    = require('infuse/infusion'),
    astUtil     = require('infuse/ast/util'),
    resolve     = require('infuse/resolve'),
    Infuser     = require('infuse/infuser'),
    Insertions  = require('infuse/infusions/definitions'),
    toNode      = astUtil.toNode,
    toValue     = astUtil.toValue,
    isArray     = Array.isArray,
    pathMap     = {},
    URL_REGEX   = /^https?:\/\//
;

module.exports = Infusion.derive({
    
    init: function (opts) {
        this.options = opts || {};
        this.requires = [];
        this.pathMap = {};
    },
    /**
     * Create a Module require
     * @returns {Number} the id of the required item
     */
    addModule: function (name) {
        var 
            pathMap = this.pathMap,
            requires,
            id, infuser, opts,
            filepath
        ;
        
        if (pathMap.hasOwnProperty(name)) {
            return pathMap[name];
        }
        
        infuser = this.infuser;
        opts = this.options;
        requires = this.requires;
        
        filepath = resolve(infuser.directory, name, opts.nodePaths);
        
        id = requires.length;
        pathMap[name] = id;
        requires.push({
            id: id,
            name: name,
            filepath: filepath,
            ast: infuser.run(filepath)
        });

        return id;
    },
    /**
     * Create a Url require
     * @returns {Number} the id of the required item
     */
    addUrl: function (name) {
        var 
            pathMap = this.pathMap,
            id = pathMap[name],
            requires = this.requires
        ;

        if (~id) {
            return id;
        }

        requires.push({
            id: requires.length,
            url: name
        });

        return id;
    },
    /**
     * Determine whether to add a url or a local module
     * @returns {Number} the id of the required item
     */
    require: function (name) {
        var id = URL_REGEX.test(name) ? this.addUrl(name) : this.addModule(name);
        return id;
    },
    
    events: {
        'start': function (infuser) {
            this.infuser = infuser;
            // console.log(JSON.stringify(infuser.ast, null, 4));
        },
        
        'complete': function (infuser) {
            var self = this,
                reqInfuser = new Infuser(),
                ast;
                
            // Bundle everything up and insert it
            reqInfuser.use({
                rules: {
                    'id[name=MODULES]': function (node, infuser) {
                        node.update({
                            type: 'ObjectExpression',
                            properties: self.requires.map(function (req) {
                                return {
                                    type: 'Property',
                                    key: toNode(req.id),
                                    value: {
                                        type: 'FunctionExpression',
                                        id: null,
                                        params: [],
                                        body: {
                                            type: 'BlockStatement',
                                            body: req.ast.subject.body
                                        }
                                    },
                                    kind: 'init'
                                };
                            })
                        });
                    }
                }
            });
            // find our infusion replacement
            ast = reqInfuser.run(__dirname + '/requires-tmpl.js');
            // append the original application to the body of the requires...
            ast.subject.body.push.apply(ast.subject.body, infuser.ast.subject.body);
            // and replace the infuser's ast with that one
            infuser.ast.options.ast = ast;
            
            // console.log(infuser.ast.source);
        }
    },
    
    rules: {
        'call.callee > id[name="require"]': function (node, infuser) {
            var self = this,
                callNode = node.parent,
                args = callNode.arguments
            ;

            args.forEach(function (arg, idx) {
                switch (arg.type) {
                    case 'Literal':
                        arg.update('value', self.require(arg.value));
                        break;
                    case 'Identifier':
                        // TODO: Figure out scope and use that as the require
                        break;
                }
            });
        }
    }
});
