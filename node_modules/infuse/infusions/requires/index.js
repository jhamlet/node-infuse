
var Infusion    = require('infuse/infusion'),
    Ast         = require('infuse/ast'),
    astUtil     = require('infuse/ast/util'),
    resolve     = require('infuse/resolve'),
    Infuser     = require('infuse/infuser'),
    Definitions = require('infuse/infusions/definitions'),
    Path        = require('path'),
    toNode      = astUtil.toNode,
    toValue     = astUtil.toValue,
    isArray     = Array.isArray,
    pathMap     = {},
    MODULE_TMPL
;

module.exports = Infusion.derive({
    
    init: function (opts) {
        this.options = opts || {};
        this.modules = [];
        this.pathMap = {};
    },
    
    type: 'requires',
    /**
     * Create a Module require
     * @returns {Number} the id of the required item
     */
    addModule: function (name) {
        var pathMap = this.pathMap,
            modules, id, infuser, opts,
            curAst, filepath;
        
        if (pathMap.hasOwnProperty(name)) {
            return pathMap[name];
        }
        
        infuser  = this.infuser;
        opts     = this.options;
        modules  = this.modules;
        curAst   = infuser.ast;
        
        // TODO: Catch any exceptions for better error handling
        filepath = resolve(curAst.directory, name, opts.nodelib);
        
        id = modules.length;
        pathMap[name] = id;
        modules.push({
            id: id,
            name: name,
            filepath: filepath,
            ast: infuser.run(new Ast({ file: filepath }))
        });

        return id;
    },
    /**
     * Determine whether to add a url or a local module
     * @returns {Number} the id of the required item
     */
    require: function (name) {
        return this.addModule(name);
        // var id = URL_REGEX.test(name) ? this.addUrl(name) : this.addModule(name);
        // return id;
    },
    
    makeModule: function (req) {
        var modulePath = Path.join(__dirname, 'module-tmpl.js'),
            moduleAst = new Ast({ file: modulePath }),
            placeholderNode,
            fnNode,
            fnBlock,
            childIdx;

        // TODO: Implement Ast#clone so I do not have to read the file over and over
        // if (!MODULE_TMPL) {
        //     MODULE_TMPL = new Ast({ file: modulePath });
        // }
        // clone our template
        // moduleAst = MODULE_TMPL.clone();

        // replace all the MODULE_ID identifiers with the module id
        moduleAst.query('id[name="MODULE_ID"]').forEach(function (node) {
            node.alter({ type: 'Literal', value: req.id });
        });
        // We're only interested in the body of this sub-program
        fnNode = moduleAst.subject.getChildNodes('body')[0];
        fnNode.type = 'FunctionExpression';
        fnNode.id = null;
        // splice the module code into our module function
        placeholderNode = moduleAst.query('id[name=MODULE]')[0];
        fnBlock = fnNode.getChildNodes('body');
        childIdx = fnBlock.body.indexOf(placeholderNode);
        fnBlock.body.splice.apply(
            fnBlock.body,
            [childIdx - 1, 1].concat(req.ast.subject.getChildNodes('body'))
        );
        // return it as a property expression
        return {
            type: 'Property',
            key: toNode(req.id),
            value: fnNode,
            kind: 'init'
        };
    },
    
    events: {
        'start': function (infuser) {
            this.infuser = infuser;
        },
        
        'complete': function (infuser) {
            if (!this.modules.length) {
                return;
            }
            
            var appPath = Path.join(__dirname, '/app-tmpl.js'),
                appAst = new Ast({ file: appPath }),
                ast;
            
            appAst.query('id[name=MODULES]')[0].alter({
                type: 'ObjectExpression',
                properties: this.modules.map(this.makeModule, this)
            });
            // append the original application to the body of the requires...
            appAst.subject.body.push.apply(appAst.subject.body, infuser.ast.subject.body);
            // and replace the infuser's ast with that one
            infuser.subject.options.ast = appAst;
            // console.log(JSON.stringify(appAst.subject, null, 4));
            // console.log(infuser.ast.source);
        }
    },
    
    rules: {
        'call.callee > id[name="require"]': function (node, infuser) {
            var callNode = node.parent,
                // Node only allows one argument to 'require'
                arg = callNode.arguments[0];
            
            switch (arg.type) {
            case 'Literal':
                arg.alter('value', this.require(arg.value));
                break;
            case 'Identifier':
                // TODO: Use scope and determine module
                break;
            }
        }
    }
});
