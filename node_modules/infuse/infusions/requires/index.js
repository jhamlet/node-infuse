
var Infusion    = require('infuse/infusion'),
    Ast         = require('infuse/ast'),
    astUtil     = require('infuse/ast/util'),
    resolve     = require('infuse/resolve'),
    Infuser     = require('infuse/infuser'),
    Insertions  = require('infuse/infusions/definitions'),
    toNode      = astUtil.toNode,
    toValue     = astUtil.toValue,
    isArray     = Array.isArray,
    pathMap     = {},
    URL_REGEX   = /^https?:\/\//,
    MODULE_TMPL
;

module.exports = Infusion.derive({
    
    init: function (opts) {
        this.options = opts || {};
        this.requires = [];
        this.pathMap = {};
    },
    /**
     * Create a Module require
     * @returns {Number} the id of the required item
     */
    addModule: function (name) {
        var 
            pathMap = this.pathMap,
            requires,
            id, infuser, opts,
            filepath
        ;
        
        if (pathMap.hasOwnProperty(name)) {
            return pathMap[name];
        }
        
        infuser = this.infuser;
        opts = this.options;
        requires = this.requires;
        
        filepath = resolve(infuser.directory, name, opts.nodePaths);
        
        id = requires.length;
        pathMap[name] = id;
        requires.push({
            id: id,
            name: name,
            filepath: filepath,
            ast: infuser.run(filepath)
        });

        return id;
    },
    /**
     * Create a Url require
     * @returns {Number} the id of the required item
     */
    addUrl: function (name) {
        var 
            pathMap = this.pathMap,
            id = pathMap[name],
            requires = this.requires
        ;

        if (~id) {
            return id;
        }

        requires.push({
            id: requires.length,
            url: name
        });

        return id;
    },
    /**
     * Determine whether to add a url or a local module
     * @returns {Number} the id of the required item
     */
    require: function (name) {
        return this.addModule(name);
        // var id = URL_REGEX.test(name) ? this.addUrl(name) : this.addModule(name);
        // return id;
    },
    
    makeModule: function (req) {
        var moduleAst = new Ast({ file: __dirname + '/module-tmpl.js'}),
            placeholderNode,
            fnNode,
            fnBlock,
            childIdx;

        // TODO: Implement Ast#clone so I do not have to read the file over and over
        // if (!MODULE_TMPL) {
        //     MODULE_TMPL = new Ast({ file: __dirname + '/module-tmpl.js'});
        // }
        // clone our template
        // moduleAst = MODULE_TMPL.clone();

        // replace all the MODULE_ID identifiers with the module id
        moduleAst.query('id[name="MODULE_ID"]').forEach(function (node) {
            node.update({ type: 'Literal', value: req.id });
        });
        // We're only interested in the body of this sub-program
        fnNode = moduleAst.subject.getChildNodes('body')[0];
        fnNode.type = 'FunctionExpression';
        fnNode.id = null;
        // splice the module code into our module function
        placeholderNode = moduleAst.query('id[name=MODULE]')[0];
        fnBlock = fnNode.getChildNodes('body');
        childIdx = fnBlock.body.indexOf(placeholderNode);
        fnBlock.body.splice.apply(
            fnBlock.body,
            [childIdx - 1, 1].concat(req.ast.subject.getChildNodes('body'))
        );
        // return it as a property expression
        return {
            type: 'Property',
            key: toNode(req.id),
            value: fnNode,
            kind: 'init'
        };
    },
    
    events: {
        'start': function (infuser) {
            this.infuser = infuser;
            // console.log(JSON.stringify(infuser.ast, null, 4));
        },
        
        'complete': function (infuser) {
            var self = this,
                appAst = new Ast({ file: __dirname + '/app-tmpl.js'}),
                ast;
            
            appAst.query('id[name=MODULES]').forEach(function (node) {
                node.update({
                    type: 'ObjectExpression',
                    properties: self.requires.map(self.makeModule, self)
                });
            });
            // append the original application to the body of the requires...
            appAst.subject.body.push.apply(appAst.subject.body, infuser.ast.subject.body);
            // and replace the infuser's ast with that one
            infuser.ast.options.ast = appAst;
            // console.log(JSON.stringify(appAst.subject, null, 4));
            // console.log(infuser.ast.source);
        }
    },
    
    rules: {
        'call.callee > id[name="require"]': function (node, infuser) {
            var self = this,
                callNode = node.parent,
                args = callNode.arguments
            ;

            args.forEach(function (arg, idx) {
                switch (arg.type) {
                    case 'Literal':
                        arg.update('value', self.require(arg.value));
                        break;
                    case 'Identifier':
                        // TODO: Figure out scope and use that as the require
                        break;
                }
            });
        }
    }
});
