/**
 * @singleton plugin
 */
module.exports = Object.defineProperties({
    /**
     * @param {String} name
     * @param {Object} obj the plugin instance
     * @returns {Boolean} whether or not the plugin was registered
     */
    register: function (name, obj) {
        var idToIdxMap = this.__idToIdxMap__,
            plugins = this.__plugins__;
        
        if (idToIdxMap[name] !== undefined) {
            // throw new Error('Infuse plugin \'' + name '\' already defined.');
            return false;
        }
        
        idToIdxMap[name] = (plugins.push(obj) - 1);
        obj.id = name;
        
        return true;
    },
    /**
     * Retrieve a plugin by numeric index or id string.
     * @param {Number|String} idx
     * @returns {Object} Plugin instance
     */
    get: function (idx) {
        var plugins = this.__plugins__;
        return typeof idx === 'number' ?
            plugins[idx] :
            plugins[this.__idToIdxMap__[idx]];
    },
    /**
     * Get a list of plugins based on passed function
     * @param {Function} fn
     * @param {Object} scope optional
     * @returns {Array}
     */
    filter: function (fn, scope) {
        return this.__plugins__.filter(fn, scope);
    },
    /**
     * Get a list of plugins based on 'type'
     * @param {String} t the type wanted
     * @returns {Array}
     */
    getType: (function () {
        var type;
        
        function filterType (plugin) {
            return plugin && plugin.type === type;
        }
        
        return function (t) {
            type = t;
            return this.filter(filterType);
        };
    }())
    
}, {
    
    __plugins__: { value: [] },
    
    __idToIdxMap__: { value: {} },
    
    length: { get: function () {
        return this.__plugins__.length;
    } },
    
    plugins: { get: function () {
        return this.__plugins__;
    }, enumerable: true }
});
//---------------------------------------------------------------------------
// @interface Plugin
//---------------------------------------------------------------------------
/**
 * The id string for the particular plugin
 * @property {String} Processor.id
 * 
 * A general grouping by type
 * @property {String} Processor.type
 * 
 * Run this plugin and call the callback
 * @property {Function} Processor.run
 *      @param {String} src
 *      @param {String} opts optional, a string to be parsed for options
 *      @param {Function} callback
 *           @param {Mixed} error
 *           @param {String} result
 *      @returns {Object} Processor instance
 *      @async
 */
//---------------------------------------------------------------------------
// Load Standard Plug-ins
//---------------------------------------------------------------------------
require('./minify');
require('./processor');
