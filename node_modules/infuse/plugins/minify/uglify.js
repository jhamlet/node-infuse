
var plugins = require('infuse/plugins'),
    MANGLE_OPT_KEYS     = ['toplevel', 'except'],
    SQUEEZE_OPT_KEYS    = ['make_seqs', 'dead_code'],
    uglify, jsp, gen;

function reduceIfExists (acc, cur) {
    if (this.hasOwnProperty(cur)) {
        acc[cur] = this[cur];
    }
    return acc;
}

module.exports = {

    type: 'minify',

    run: function (src, opts) {
        var ast,
            mangleOpts, squeezeOpts, genOpts,
            result;

        opts = this.parseOptions(opts);

        ast = jsp.parse(src.toString(), opts.strict_semicolons);

        if (opts.lift_variables !== false) {
            ast = gen.ast_lift_variables(ast);
        }

        if (!opts.no_mangle) {
            mangleOpts  = MANGLE_OPT_KEYS.reduce(reduceIfExists.bind(opts), {});
            ast = gen.ast_mangle(ast, mangleOpts);
        }

        if (!opts.no_squeeze) {
            squeezeOpts = SQUEEZE_OPT_KEYS.reduce(reduceIfExists.bind(opts), {});
            ast = gen.ast_squeeze(ast, squeezeOpts);
        }

        return gen.gen_code(ast);
    },
    /**
     * Turns keys and optional values into an object.
     * 
     * i.e:
     * 
     *  'toplevel except:foo,bar'
     * 
     * becomes:
     * 
     *  { toplevel: true, except: ['foo', 'bar'] }
     * 
     * @param {String} optsTxt
     * @returns {Object}
     */
    parseOptions: function (optsTxt) {
        var opts = {};

        if (typeof optsTxt !== 'string') {
            return opts;
        }

        optsTxt.split(/\s+/).forEach(function (optTxt) {
            var optParts, optLabel, jsonValue, optValue;

            if (~optTxt.indexOf(':')) {
                optParts = optTxt.split(':');
                optLabel = optParts[0];
                jsonValue = ~optParts[1].indexOf(',') ?
                        optParts[1].split(',') :
                        optParts[1];
            }
            else {
                optLabel = optTxt;
                jsonValue = true;
            }

            if (typeof jsonValue === 'string') {
                try {
                    optValue = JSON.parse(jsonValue);
                }
                catch (e) {
                    optValue = jsonValue || true;
                }
            }

            opts[optLabel] = optValue || jsonValue;
        });

        return opts;
    }
};

try {
    uglify = require('uglify-js');
    jsp = uglify.parser;
    gen = uglify.uglify;

    plugins.register('uglifyjs', module.exports);
}
catch (e) {
    // don't register
}
