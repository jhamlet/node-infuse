
var Extract     = require('infuse/extract'),
    astUtil     = require('infuse/ast/util'),
    resolve     = require('infuse/resolve'),
    toNode      = astUtil.toNode,
    toValue     = astUtil.toValue,
    isArray     = Array.isArray,
    pathMap     = {},
    URL_REGEX   = /^https?:\/\//
;

module.exports = Extract.derive({
    
    init: function (opts) {
        this.options = opts || {};
        this.requires = [];
        this.pathMap = {};
    },
    /**
     * Create a Module require
     * @returns {Number} the id of the required item
     */
    addModule: function (name) {
        var 
            pathMap = this.pathMap,
            requires,
            id, infuser, opts,
            filepath
        ;

        if (~(id = pathMap[name])) {
            return id;
        }
        
        infuser = this.infuser;
        opts = this.options;
        requires = this.requires;
        
        filepath = resolve(infuser.directory, name, opts.nodePaths);

        id = requires.length;
        pathMap[name] = id;
        requires.push({
            id: id,
            name: name,
            filepath: filepath,
            ast: infuser.run(filepath)
        });

        return id;
    },
    /**
     * Create a Url require
     * @returns {Number} the id of the required item
     */
    addUrl: function (name) {
        var 
            pathMap = this.pathMap,
            id = pathMap[name],
            requires = this.requires
        ;

        if (~id) {
            return id;
        }

        requires.push({
            id: requires.length,
            url: name
        });

        return id;
    },
    /**
     * Determine whether to add a url or a local module
     * @returns {Number} the id of the required item
     */
    require: function (name) {
        var id = URL_REGEX.test(name) ? this.addUrl(name) : this.addModule(name);
        return id;
    },
    
    events: {
        'start': function (infuser) {
            this.infuser = infuser;
        },
        
        'complete': function (infuser) {
            // Bundle everything up and insert into the infuser
        }
    },
    
    rules: {
        'call.callee > id[name="require"]': function (node, infuser) {
            var nodeArgs = node.arguments,
                isList = nodeArgs.length && nodeArgs[0].type === "ArrayExpression",
                params = isList ? nodeArgs[0] : nodeArgs
            ;

            params.forEach(function (param, idx) {
                switch (param.type) {
                    case 'Literal':
                        param.update('value', this.require(param.value));
                        break;
                    case 'Identifier':
                        // TODO: Figure out scope and use that as the require
                        break;
                }
            });
        }
    }
});
