/**
 * extract noun |ˈekˌstrakt|
 * 
 * a preparation containing the active ingredient of a substance in concentrated
 * form: vanilla extract | extract of chamomile.
 */
var
    Proteus = require('proteus'),
    Extract
;

module.exports = Extract = Proteus.Class.derive(Object.defineProperties({
    
    self: {
        inherited: function (subclass) {
            var 
                proto       = this.prototype,
                subproto    = subclass.prototype,
                protorules  = proto.rules,
                protoevents = proto.events,
                subrules    = subproto.rules,
                subevents   = subproto.events
            ;
            
            // Make sure the subclass has its own object for rules and
            // events, prototyped linked to the superclass'
            subproto.rules = Object.create(protorules);
            subproto.events = Object.create(protoevents);
            
            // If the subclass had its own rules or events, merge those back
            // into the prototype linked one
            if (subrules !== protorules) {
                Proteus.merge(subproto.rules, subrules);
            }

            if (subevents !== protoevents) {
                Proteus.merge(subproto.events, subevents);
            }
        },
        
        initialize: function (instance, args) {
            // Again, make sure the instance has its own object for rules
            // and events, prototyped linked back to its class' prototype
            // version
            Object.defineProperties(instance, {
                rules: { value: Object.create(instance.rules), enumerable: true },
                events: { value: Object.create(instance.events), enumerable: true }
            });
        }
    },
    
    init: function (id) {
        Object.defineProperty(this, '__id__', { value: id });
    },
    /**
     * Rules are used to match AST nodes upon leaving a node (post-order)
     * @property {Object} rules
     */
    rules: {},
    /**
     * Events are fired during AST traversal
     * @property {Object} events
     */
    events: {
        /**
         * Event property names
         * 
         *  'enter' - fired when the infuser enters a node
         *  'leave' - fired when the infuser leaves a node
         *  'visit' - fired on both entering and leaving a node
         *  '*'     - synonymous with 'visit'
         * 
         * Events can be modified to only fire on nodes that match a certain
         * rule.  Just add a colon after the event name and then specify the
         * node rule.
         * 
         *  'enter:Identifier[name="require"]'
         *  'leave:CallExpression'
         *  'visit:VariableDeclarator'
         *  'leave:call.callee > member id[name="foo"]'
         * 
         * Infuser events.
         * 
         * These are events associated with overall Infuser processing.
         * These events are not associated with nodes, and do not accept a
         * rule after their name
         * 
         *  start    - fired when the infuser starts processing
         *  begin    - fired when the infuser begins working on a sub-file/AST
         *  end      - fired when the infuser finishes working on a sub-file/AST
         *  complete - fired when the infuser is all done
         */
    }
}, {
    /**
     * @property {String} id
     */
    id: { get: function () {
        return this.__id__;
    }, enumerable: true }
}));