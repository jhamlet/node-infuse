
var Proteus     = require("proteus"),
    Infuser     = require("./infuser"),
    Ast         = require("./ast"),
    plugins     = require('./plugins');

/**
 * @param {Object} opts
 *      @property {String}  opts.file file to infuse
 *      @property {Boolean} opts.comments keep comments?
 *      @property {Boolean} opts.embed embed modules as strings?
 *      @property {Boolean} opts.requires process requires?
 *      @property {Array}   opts.infusions extra infusions to use
 *      @property {Array}   opts.modules modules to pre-define and export
 *      @property {Array}   opts.nodelib paths to node core library
 *      @property {Object}  opts.definitions definitions to replace
 *      @property {String}  opts.minifier minifier to use, if any
 *      @property {String}  opts.dump either 'ast' or 'modules'
 * @returns {infuse.Ast}
 */
function infuse (opts) {
    var ast = new Ast(),
        infuser = new Infuser(),
        parserOpts,
        generatorOpts,
        ReqInfusion,
        reqModListKey,
        DefInfusion,
        minify,
        embed,
        instance,
        result;

    opts = opts || {};
    
    ast.file = opts.file;
    
    if (opts.comments && !opts.minifier) {
        // yes, you have to set all these options to get comments
        (parserOpts = ast.options.parser).comment =
            parserOpts.tokens = parserOpts.range = true;
    }
    
    if (opts.minifier) {
        generatorOpts = {
            format: {
                compact: true,
                format: {
                    style: '',
                    base: 0
                }
            }
        };
    }
    
    if (opts.requires) {
        ReqInfusion = require('./infusions/requires');
        instance = new ReqInfusion({
            nodelib: opts.nodelib,
            parser: parserOpts,
            generator: generatorOpts,
            resolve: require('./resolve')
        });
        infuser.use(instance);
        reqModListKey = instance.REQUIRED_MODULES_LIST_KEY;
        if (opts.modules) {
            // TODO: add the modules
        }
    }
    
    if (opts.definitions) {
        DefInfusion = require('./infusions/definitions');
        infuser.use(new DefInfusion(opts.definitions));
    }
    
    if (opts.infusions) {
        opts.infusions.forEach(function (name) {
            var Infusion = require(name);
            instance = typeof Infusion === 'function' ? new Infusion(opts) : Infusion;
            infuser.use(instance);
        });
    }
    
    // At this point we can generate the ast based on the above options
    infuser.run(ast);
    
    // If all we are going to do is dump meta-info, we can return at this point
    if (opts.dump) {
        switch (opts.dump) {
        case 'ast':
            return ast.subject;
        case 'modules':
            return (infuser.get(reqModListKey) || []).map(function (mod) {
                return mod.filepath;
            });
        }
    }
    
    // The following two options work on the source generated from the AST
    result = ast.source;
    
    if (opts.minifier) {
        minify = plugins.get(opts.minifier);
        result = minify.run(result, opts.minifyOpts);
    }
    
    if (opts.embed) {
        embed = plugins.get('embed');
        result = embed.run(result, {
            parser: parserOpts,
            generator: generatorOpts
        });
    }
    
    return result;
}
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = {
    sync:       infuse,
    Infuser:    Infuser,
    Infusion:   require('./infusion'),
    Ast:        Ast,
    util:       require('./util')
};