
var Proteus     = require("proteus"),
    Infuser     = require("./infuser"),
    Ast         = require("./ast");

function preProcess (file, processor) {
    
}
/**
 * @param {Object} opts
 *      @property {String}  opts.file file to infuse
 *      @property {Boolean} opts.comments keep comments?
 *      @property {Boolean} opts.embed embed modules as strings?
 *      @property {Boolean} opts.requires process requires?
 *      @property {Array}   opts.infusions extra infusions to use
 *      @property {Array}   opts.modules modules to pre-define and export
 *      @property {Array}   opts.nodelib path(s) to node core library
 *      @property {Object}  opts.definitions definitions to replace
 *      @property {String}  opts.processor processor to run on file before parsing
 *      @property {String}  opts.minifier minifier to use, if any
 *      @property {String}  opts.dump either 'ast' or 'modules'
 *      @property {Object}  opts.generator additional options to pass to the
 *          source code generator. See ./ast/stringify.js
 * @returns {infuse.Ast}
 */
function infuse (opts) {
    var file = opts.file,
        ast = new Ast(),
        infuser = new Infuser(),
        parserOpts,
        ReqInfusion,
        reqModListKey,
        DefInfusion,
        instance,
        src;
    
    if (opts.comments) {
        // yes, you have to set all these options to get comments
        (parserOpts = ast.options.parse).comment =
            parserOpts.tokens = parserOpts.range = true;
    }
    
    ast.file = file;
    
    if (opts.processor) {
        // we set the source so we operate on the pre-processed source,
        // and not read from the file itself
        ast.source = preProcess(file, opts.processor);
    }
    else if ((src = preProcess(file))) {
        ast.source = src;
    }
    
    if (opts.requires) {
        ReqInfusion = require('./infusions/requires');
        instance = new ReqInfusion({
            nodelib: opts.nodelib,
            parse: parserOpts,
            generate: opts.generator
        });
        infuser.use(instance);
        reqModListKey = instance.REQUIRED_MODULES_LIST_KEY;
        if (opts.modules) {
            // TODO: add the modules
        }
    }
    
    if (opts.definitions) {
        DefInfusion = require('./infusions/definitions');
        infuser.use(new DefInfusion(opts.definitions));
    }
    
    if (opts.infusions) {
        opts.infusions.forEach(function (name) {
            var Infusion = require(name);
            instance = typeof Infusion === 'function' ? new Infusion() : Infusion;
            infuser.use(instance);
        });
    }
    // minify before embedding...
    if (opts.minifier) {
        // MinInfusion = require('./infusions/minify');
        // infuser.use('minifier', new MinInfusion(opts.minifier));
    }
    
    if (opts.embed) {
        // EmbInfusion = require('./infusions/embed');
        // infuser.use('embedder', new EmbInfusion());
    }
    
    infuser.run(ast);
    
    if (opts.dump) {
        switch (opts.dump) {
            case 'ast':
                return ast;
            case 'modules':
                return (infuser.get(reqModListKey) || []).map(function (mod) {
                    return mod.filepath;
                });
        }
    }
    else {
        return ast.source;
    }
}
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Proteus.merge(infuse, {
    preProcess: preProcess,
    Infuser:    Infuser,
    Infusion:   require('./infusion'),
    Ast:        Ast,
    util:       require('./util')
});