
var Proteus     = require("proteus"),
    Infuser     = require("./infuser"),
    Ast         = require("./ast"),
    plugins     = require('./plugins');

/**
 * @param {Object} opts
 *      @property {String}  opts.file file to infuse
 *      @property {Boolean} opts.comments keep comments?
 *      @property {Boolean} opts.embed embed modules as strings?
 *      @property {Boolean} opts.requires process requires?
 *      @property {Array}   opts.infusions extra infusions to use
 *      @property {Array}   opts.modules modules to pre-define and export
 *      @property {Array}   opts.nodelib path(s) to node core library
 *      @property {Object}  opts.definitions definitions to replace
 *      @property {String}  opts.processor processor to run on file before parsing
 *      @property {String}  opts.minifier minifier to use, if any
 *      @property {String}  opts.dump either 'ast' or 'modules'
 *      @property {Object}  opts.generator additional options to pass to the
 *          source code generator. See ./ast/stringify.js
 * @param {Function} callback callback to invoke on completion
 *      @param {Mixed} error
 *      @param {String} result
 * @returns {infuse.Ast}
 */
function infuse (opts, callback) {
    var ast = new Ast(),
        infuser = new Infuser(),
        parserOpts,
        ReqInfusion,
        reqModListKey,
        DefInfusion,
        minify,
        instance,
        result;
    
    if (arguments.length < 2 && typeof opts === 'function') {
        callback = opts;
        opts = {};
    }
    
    ast.file = opts.file;
    
    if (opts.comments) {
        // yes, you have to set all these options to get comments
        (parserOpts = ast.options.parse).comment =
            parserOpts.tokens = parserOpts.range = true;
    }
    
    if (opts.requires) {
        ReqInfusion = require('./infusions/requires');
        instance = new ReqInfusion({
            nodelib: opts.nodelib,
            parse: parserOpts,
            generate: opts.generator
        });
        infuser.use(instance);
        reqModListKey = instance.REQUIRED_MODULES_LIST_KEY;
        if (opts.modules) {
            // TODO: add the modules
        }
    }
    
    if (opts.definitions) {
        DefInfusion = require('./infusions/definitions');
        infuser.use(new DefInfusion(opts.definitions));
    }
    
    if (opts.infusions) {
        opts.infusions.forEach(function (name) {
            var Infusion = require(name);
            instance = typeof Infusion === 'function' ? new Infusion() : Infusion;
            infuser.use(instance);
        });
    }
    
    // At this point we can generate the ast based on the above options
    infuser.run(ast);
    
    // If we're just dumping info, we can call the callback at this point
    if (opts.dump) {
        switch (opts.dump) {
        case 'ast':
            return callback(null, ast);
        case 'modules':
            callback(null, (infuser.get(reqModListKey) || []).map(function (mod) {
                return mod.filepath;
            }));
        }
        return this;
    }

    // Otherwise, we have to generate an interim callback...
    function resultCallback (error, result) {
        if (opts.embed) {
            // EmbInfusion = require('./infusions/embed');
            // infuser.use('embedder', new EmbInfusion());
        }
        else {
            callback(null, result);
        }
    }
    
    if (opts.minifier) {
        minify = plugins.get(opts.minifier);
        minify.run(ast, opts.minifyOpts, resultCallback);
    }
    else {
        resultCallback(null, ast.source);
    }
    
    return this;
}
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Proteus.merge(infuse, {
    Infuser:    Infuser,
    Infusion:   require('./infusion'),
    Ast:        Ast,
    util:       require('./util')
});