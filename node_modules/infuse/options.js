
var 
    Proteus     = require("proteus"),
    FS          = require('fs'),
    Path        = require('path'),
    app         = require("./app"),
    nutil       = require("util"),
    format      = nutil.format,
    pkgPath     = Path.join(__dirname, '..', '..', 'package.json'),
    pkgInfo     = JSON.parse(FS.readFileSync(pkgPath, 'utf8')),
    minifiers   = ['uglify', 'yui', 'closure'],
    compilers   = ['coffee', 'six', 'sjs'],
    definitions,
    options
;

//---------------------------------------------------------------------------
// Utility Functions
//---------------------------------------------------------------------------
function jsonParse (str) {
    var val;
    
    try {
        val = JSON.parse(str);
    }
    catch (e) {
        val = str || true;
    }
    
    return val;
}

function define (key, val) {
    definitions = definitions || {};
    definitions[key] = val;
    return definitions;
}
//---------------------------------------------------------------------------
// Application Options
//---------------------------------------------------------------------------
options = require('commander').
    version(pkgInfo.version).
    usage('[options] INPUT_PATH [OUTPUT_PATH]').
    option(
        '-D, --define <SYMBOL>[=VALUE]',
        'Replace all instances of the specified SYMBOL with VALUE. [*]',
        function (arg) {
            var args = arg.split(/\=/);
            return define(args[0], jsonParse(args[1]));
        }
    ).
    option(
        '-d, --module <NAME>',
        'Define all exported properties from NAME module. [*]',
        function (arg) {
            var mod = require(arg);
            
            Object.keys(mod).forEach(function (key) {
                define(key, mod[key]);
            });
            
            return definitions;
        }
    ).
    option(
        '-i, --infusion <NAME>',
        'Add NAMEd module as an infusion for the infuser.'
    ).
    option(
        '-R, --no-requires',
        'Do not process and infuse require statements.'
    ).
    option(
        '-E, --embed',
        'Embed all required modules as strings in the final output.'
    ).
    option(
        '-r, --require <PATH>',
        'Include file PATH as an automatic require. [*]'
    ).
    option(
        '-c, --pre-compiler <NAME>',
        'Run the INPUT_PATH through NAME compiler before infusing. [*]',
        function (arg) {
            if (!~compilers.indexOf(arg)) {
                console.error('');
                console.error("  error: unknown compiler '%s'", arg);
                console.error('  known compilers: %s', compilers.join(', '));
                console.error('');
                process.exit(1);
            }
            return arg;
        }
    ).
    option(
        '-m, --minifier [NAME]',
        format('Minify output using NAMEd minifier. Defaults to \'%s\'.', minifiers[0]),
        function (arg) {
            if (!~minifiers.indexOf(arg)) {
                console.error('');
                console.error("  error: unknown minifier '%s'", arg);
                console.error('  known minifiers: %s', minifiers.join(', '));
                console.error('');
                process.exit(1);
            }
            return arg;
        },
        minifiers[0]
    ).
    option(
        '-N, --no-minify',
        'Do not minify the output.'
    );

//---------------------------------------------------------------------------
// Additional Usage/Help Info
//---------------------------------------------------------------------------
options.on("--help", function () {
    console.log('  Additional Usage Information:');
    console.log('');
    console.log('    [*]   Option can be specified multiple times.');
});
//---------------------------------------------------------------------------
// Commands
//---------------------------------------------------------------------------
// info command
options.
    command('info <minifiers|compilers>').
    description('List the acceptable arguments for the option.').
    action(function (arg) {
        switch (arg) {
            case 'minifiers':
                console.log(minifiers.join('\n'));
                break;
            case 'compilers':
                console.log(compilers.join('\n'));
                break;
            default:
                console.log('nothing known about ' + arg);
        }
        
        process.exit(0);
    });
//---------------------------------------------------------------------------
// dump command
//---------------------------------------------------------------------------
options.
    command('dump <ast|modules> <FILE>').
    description('Print to STDOUT the JSON representation of the ast, or list of required modules, and then exit.').
    option(
        '-p, --pretty',
        'Prettify the output.'
    ).
    action(function (arg, cmd) {
        if (!~['ast', 'modules'].indexOf(arg)) {
            console.error('');
            console.error("  error: unknown argument '%s'", arg);
            console.error('');
            process.exit(1);
        }
        else {
            options.command = 'dump';
        }
    });
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = options.parse(process.argv);
