
var 
    Proteus     = require("proteus"),
    FS          = require('fs'),
    Path        = require('path'),
    app         = require("./app"),
    iutil       = require('./util'),
    nutil       = require("util"),
    resolve     = require('./resolve'),
    format      = nutil.format,
    pkgPath     = Path.join(__dirname, '..', '..', 'package.json'),
    pkgInfo     = JSON.parse(FS.readFileSync(pkgPath, 'utf8')),
    minifiers   = ['uglify', 'yui', 'closure'],
    processors  = ['coffee', 'six', 'sjs'],
    modules     = [],
    infusions   = [],
    libpaths    = [],
    definitions,
    program,
    options
;

//---------------------------------------------------------------------------
// Utility Functions
//---------------------------------------------------------------------------
function define (key, val) {
    definitions = definitions || {};
    definitions[key] = val;
    return definitions;
}

function accumulator (list) {
    return function (val) {
        list.push(val);
        return list;
    };
}
//---------------------------------------------------------------------------
// Program Options
//---------------------------------------------------------------------------
program = require('commander').
    version(pkgInfo.version).
    usage('[options] <INPUT_PATH> [OUTPUT_PATH]').
    // option(
    //     '-C, --no-deadcode',
    //     'do not remove \'dead\' code'
    // ).
    option(
        '-c, --comments',
        'preserve comments in the source files'
    ).
    option(
        '-D, --define <SYMBOL>[=VALUE]',
        'replace the specified SYMBOL(s) with VALUE [*]',
        function (arg) {
            var args = arg.split(/\=/);
            return define(args[0], iutil.jsonParse(args[1]));
        }
    ).
    option(
        '-d, --definitions <NAME>',
        'replace all exported properties from NAME module [*]',
        function (arg) {
            var resolved = resolve(process.cwd(), arg),
                mod = require(resolved),
                key;
            
            for (key in mod) {
                define(key, mod[key]);
            }
            
            return definitions;
        }
    ).
    option(
        '-A, --dump-ast',
        'output the JSON for the generated AST'
    ).
    option(
        '-M, --dump-modules',
        'output the list of the required modules'
    ).
    option(
        '-e, --embed',
        'embed all required modules as strings'
    ).
    option(
        '-i, --infusion <NAME>',
        'add NAME module as an infusion [*]',
        accumulator(infusions)
    ).
    option(
        '-m, --minify [NAME]',
        format('minify output using NAME minifier [\'%s\']', minifiers[0]),
        function (arg) {
            if (!~minifiers.indexOf(arg)) {
                console.error('');
                console.error("  error: unknown minifier '%s'", arg);
                console.error('  known minifiers: %s', minifiers.join(', '));
                console.error('');
                process.exit(1);
            }
            return arg;
        },
        minifiers[0]
    ).
    option(
        '-n, --nodelib <PATH>',
        'path to the local node core modules directory [*]',
        accumulator(libpaths)
    ).
    option(
        '-p, --pre-process <NAME>',
        'run the INPUT_PATH through NAME processor before infusing [*]',
        function (arg) {
            if (!~processors.indexOf(arg)) {
                console.error('');
                console.error("  error: unknown compiler '%s'", arg);
                console.error('  known processors: %s', processors.join(', '));
                console.error('');
                process.exit(1);
            }
            return arg;
        }
    ).
    option(
        '-r, --require <NAME>',
        'include NAME module as an automatic require [*]',
        accumulator(modules)
    ).
    option(
        '-R, --no-requires',
        'do not process require statements'
    );

//---------------------------------------------------------------------------
// Additional Usage/Help Info
//---------------------------------------------------------------------------
program.on("--help", function () {
    console.log('  Additional Usage Information:');
    console.log('');
    console.log('    [*]   option can be specified multiple times');
    console.log('');
});
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
options = program.parse(process.argv);
//---------------------------------------------------------------------------
// Normalize our aliases
//---------------------------------------------------------------------------
options.definitions = options.definitions || options.define;
options.infusions = infusions;
options.modules = modules;
delete options.define;

// console.log(options);

if (!options.args.length) {
    program.outputHelp();
    process.exit(0);
}

module.exports = options;