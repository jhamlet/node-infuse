
var 
    Proteus     = require("proteus"),
    FS          = require('fs'),
    Path        = require('path'),
    pkgPath     = Path.join(__dirname, '..', '..', 'package.json'),
    pkgInfo     = JSON.parse(FS.readFileSync(pkgPath, 'utf8')),
    minifiers   = ['uglify-js', 'yui-compressor', 'closure-compiler'],
    definitions = {},
    program
;

function jsonParse (str) {
    var val;
    
    try {
        val = JSON.parse(str);
    }
    catch (e) {
        val = str || true;
    }
    
    return val;
}

program = require('commander').
    version(pkgInfo.version).
    usage('[options] INPUT_PATH [OUTPUT_PATH]').
    option(
        '-N, --no-minify',
        'Do not minify the output.'
    ).
    option(
        '-m, --minifier [NAME]',
        'Minifier to use. Defaults to \'uglify-js\'.',
        function (arg) {
            if (!~minifiers.indexOf(arg)) {
                console.error('');
                console.error("  error: unknown minifier '%s'", arg);
                console.error('  known minifiers: %s', minifiers.join(', '));
                console.error('');
                process.exit(1);
            }
            return arg;
        },
        'uglify-js'
    ).
    option(
        '-D, --define <SYMBOL>[=VALUE]',
        'Replace all instances of the specified SYMBOL with VALUE. [*]',
        function (arg) {
            var args = arg.split(/\=/);
            definitions[args[0]] = jsonParse(args[1]);
            return definitions;
        }
    ).
    option(
        '-d, --module <NAME>',
        'Define all exported properties from NAME module. [*]',
        function (arg) {
            var mod = require(arg);
            
            if (mod) {
                Proteus.merge(definitions, mod);
            }
            
            return definitions;
        }
    ).
    option(
        '-E, --embed',
        'Embed all infused modules as strings in the final output.'
    ).
    option(
        '-i, --infuse [PATH]',
        'Infuse the file PATH. Will automatically be \'de-fused\' before the INPUT_PATH executes. [*]'
    ).
    option(
        '-A, --dump-ast',
        'Print the generated AST to STDOUT and exit.'
    ).
    option(
        '-R, --dump-requires',
        'Print all \'required\' files to STDOUT and exit.'
    );

program.on("--help", function () {
    console.log('  Additional Usage Information:');
    console.log('');
    console.log('    [*]   Option can be specified multiple times.');
});

module.exports = program.parse(process.argv);
// console.log(module.exports);