var Proteus = require("proteus");

function makeList () {
    var list = Proteus.slice(arguments).concat("leadingComments", "trailingComments");
    return Object.freeze(list);
}

module.exports = {
    AssignmentExpression:  makeList("left", "right"),
    ArrayExpression:       makeList("elements"),
    BlockStatement:        makeList("body"),
    BinaryExpression:      makeList("left", "right"),
    BreakStatement:        makeList("label"),
    CallExpression:        makeList("callee", "arguments"),
    CatchClause:           makeList("param", "body"),
    ConditionalExpression: makeList("test", "consequent", "alternate"),
    ContinueStatement:     makeList("label"),
    DoWhileStatement:      makeList("body", "test"),
    DebuggerStatement:     makeList(),
    EmptyStatement:        makeList(),
    ExpressionStatement:   makeList("expression"),
    ForStatement:          makeList("init", "test", "update", "body"),
    ForInStatement:        makeList("left", "right", "body"),
    FunctionDeclaration:   makeList("id", "params", "body"),
    FunctionExpression:    makeList("id", "params", "body"),
    Identifier:            makeList(),
    IfStatement:           makeList("test", "consequent", "alternate"),
    Literal:               makeList(),
    LabeledStatement:      makeList("label", "body"),
    LogicalExpression:     makeList("left", "right"),
    MemberExpression:      makeList("object", "property"),
    NewExpression:         makeList("callee", "arguments"),
    ObjectExpression:      makeList("properties"),
    Program:               makeList("body"),
    Property:              makeList("key", "value"),
    ReturnStatement:       makeList("argument"),
    SequenceExpression:    makeList("expressions"),
    SwitchStatement:       makeList("descriminant", "cases"),
    SwitchCase:            makeList("test", "consequent"),
    ThisExpression:        makeList(),
    ThrowStatement:        makeList("argument"),
    TryStatement:          makeList("block", "handlers", "finalizer"),
    UnaryExpression:       makeList("argument"),
    UpdateExpression:      makeList("argument"),
    VariableDeclaration:   makeList("declarations"),
    VariableDeclarator:    makeList("id", "init"),
    WhileStatement:        makeList("test", "body"),
    WithStatement:         makeList("object", "body"),
    // For comments        
    Block:                 makeList(),
    Line:                  makeList()
};
