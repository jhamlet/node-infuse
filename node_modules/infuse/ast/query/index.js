
var Proteus = require("proteus"),
    queryParser = new (require("./parser"))(),
    Query
;

/**
 * Very basic query handling at this time.
 * 
 * The interface provides a way to expand this later.
 */
module.exports = Query = Proteus.Class.derive({
    self: Object.defineProperties({
        /**
         * Individual queries are cached for re-use
         */
        initialize: function (instance, args) {
            var
                query = args[0],
                cache = this.__cache__,
                cached = cache[query]
            ;

            if (cached) {
                return cached;
            }
            
            cache[query] = instance;
        }
    }, {
        __cache__: { value: {} }
    }),
    /**
     * @constructor
     * @param {String} query the rule, or rules to parse.
     */
    init: function (query) {
        this.source = query;
        this.rules = queryParser.parse(query);
    },
    /**
     * @method test
     * @param {Object} node node-wrapper instance
     * @returns {Boolean} whether or not this query matched the node-wrapper
     */
    test: function (node) {
        return this.rules.some(function (rule) {
            return rule.test(node);
        });
    }
    
});
