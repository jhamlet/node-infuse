
var TYPES = {
        'assign':   'AssignmentExpression',
        'array':    'ArrayExpression',
        'block':    'BlockStatement',
        'binary':   'BinaryExpression',
        'break':    'BreakStatement',
        'call':     'CallExpression',
        'catch':    'CatchClause',
        'cond':     'ConditionalExpression',
        'cont':     'ContinueStatement',
        'do':       'DoWhileStatement',
        'debug':    'DebuggerStatement',
        'empty':    'EmptyStatement',
        'exp':      'ExpressionStatement',
        'for':      'ForStatement',
        'forin':    'ForInStatement',
        'fun':      'FunctionDeclaration',
        'fn':       'FunctionExpression',
        'id':       'Identifier',
        'if':       'IfStatement',
        'lit':      'Literal',
        'label':    'LabeledStatement',
        'logic':    'LogicalExpression',
        'member':   'MemberExpression',
        'new':      'NewExpression',
        'objexp':      'ObjectExpression',
        'prop':     'Property',
        'ret':      'ReturnStatement',
        'seq':      'SequenceExpression',
        'switch':   'SwitchStatement',
        'case':     'SwitchCase',
        'this':     'ThisExpression',
        'throw':    'ThrowStatement',
        'try':      'TryStatement',
        'unary':    'UnaryExpression',
        'update':   'UpdateExpression',
        'vars':     'VariableDeclaration',
        'var':      'VariableDeclarator',
        'while':    'WhileStatement',
        'with':     'WithStatement'
    },
    REGEX = new RegExp("\\b(" + Object.keys(TYPES).join("|") + ")\\b", "g")
;

module.exports = {

    replace: function (txt) {
        return txt.replace(REGEX, function (match, $1) {
            return TYPES[$1];
        });
    }
};
