
var Proteus = require("proteus"),
    Esprima = require("esprima"),
    Ecgen   = require("escodegen"),
    FS      = require("fs")
;

/**
 * Parse a source string into an AST object.
 * 
 * The source can be provided as a string-like object in the first argument,
 * or as the property "source" in the options object.  You can also specify
 * a file to open with a "file" property on the options object.
 * 
 * If the "comment" and "tokens" property on the options object are true,
 * comments from the source code will be applied as the keys "leadingComments"
 * and "trailingComments" on individual nodes in the AST returned.  This
 * defaults to true.
 * 
 * @function parse
 * @param {String} src optional, the string to parse
 * @param {Object} opts optional, options to pass onto Esprima
 * @returns {Object} the parsed AST
 */
function parse (src, opts) {
    var ast;
    
    if (arguments.length < 2 && typeof src !== "string") {
        opts = src;
        src = null;
    }
    
    opts = Proteus.merge({}, parse.options, opts || {});
    
    src = src || opts.source ||
          (opts.file && FS.readFileSync(opts.file));
    
    if (!src) {
        throw new Error("Parse needs something to, ahem, parse...");
    }
    
    ast = Esprima.parse(src.toString(), opts);
    // We attach code comments early. If there is any mangling of the ast, we
    // want to have the comments travel with their nodes.
    if (opts.comment && opts.tokens && opts.range) {
        Ecgen.attachComments(ast, ast.comments, ast.tokens);
    }
    
    return ast;
}

module.exports = Proteus.merge(parse, {
    options: {
        /**
         * The string-like source to parse, if not provided as the first
         * argument to parse
         * 
         * @property {String-like} options.source
         */
        /**
         * A file to open and parse its contents.
         * 
         * @property {String} options.file
         */
        /**
         * @property {Boolean} options.loc 
         */
        loc: false,
        /**
         * @property {Boolean} options.range
         */
        range: true,
        /**
         * @property {Boolean} options.raw
         */
        raw: false,
        /**
         * @property {Boolean} options.tokens
         */
        tokens: true,
        /**
         * @property {Boolean} options.comment
         */
        comment: true
    }
});
