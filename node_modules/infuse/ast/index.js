
var Proteus     = require('proteus'),
    Path        = require('path'),
    FS          = require('fs'),
    parse       = require('./parse'),
    stringify   = require('./stringify'),
    traverse    = require('./traverse'),
    wrapNode    = require('./node'),
    NodeQuery   = require('./query')
;

module.exports = Proteus.Class.derive(Object.defineProperties({
    
    self: {
        TRAVERSAL_OPTIONS:  traverse.OPTIONS
    },
    
    init: function (src, opts) {
        var parserOpts, genOpts, subj;
        
        if (arguments.length < 2 && typeof src === 'object') {
            opts = src;
            src = null;
        }
        // A little options juggling
        opts = Proteus.merge({}, opts || {});
        parserOpts = opts.parser || {};
        genOpts = opts.generator || {};
        delete opts.parser;
        delete opts.generator;
        
        this.options = Proteus.merge({}, this.options, {
            parse: parserOpts,
            generate: genOpts,
            source: src
        }, opts);

        this.reset();
    },
    /**
     * @property {Object} options
     */
    options: {
        /**
         * Options to pass onto the code parser
         * @property {Object} options.parse
         */
        /**
         * Options to pass onto the code generator
         * @property {Object} options.generate
         */
    },
    
    traverse: function (visitor) {
        traverse(this.subject, visitor);
        return this;
    },
    /**
     * @param {String} queryStr
     * @returns {Array} of nodes found
     */
    query: function (queryStr) {
        var 
            query = new NodeQuery(queryStr),
            nodes = []
        ;
        
        this.traverse({
            leave: function (node) {
                if (query.test(node)) {
                    nodes.push(node);
                }
            }
        });
        
        return nodes;
    },
    
    reset: function () {
        /**
         * @property {Boolean} parsed
         */
        /**
         * @property {Boolean} generated
         */
        this.generated = this.parsed = false;
        return this;
    },
    
    save: function (file) {
        file = file || this.options.file;
        FS.writeFileSync(file, this.source, "utf8");
    }
    
}, {
    /**
     * @property {Object} subject
     */
    subject: {
        get: function () {
            var opts = this.options,
                parserOpts = opts.parse,
                then
            ;
            
            if (!this.parsed) {
                // then = Date.now();
                parserOpts.source = opts.source;
                parserOpts.file = opts.file;
                opts.ast = wrapNode(parse(parserOpts));
                // console.log('Ast: parse: %s ms', Date.now() - then);
                this.parsed = true;
            }
            
            return opts.ast;
        },
        set: function (subj) {
            this.options.ast = wrapNode(subj);
            this.parsed = true;
            this.generated = false;
        },
        enumerable: true
    },
    /**
     * @property {String} source
     */
    source: {
        get: function () {
            var opts = this.options,
                genOpts = opts.generate
            ;
            
            if (!this.generated) {
                opts.source = stringify(this.subject, genOpts);
                this.generated = true;
            }
            
            return opts.source;
        },
        set: function (src) {
            var opts = this.options;
            
            opts.source = src;
            this.parsed = false;
            this.generated = true;
        },
        enumerable: true
    },
    
    file: {
        get: function () {
            return this.options.file;
        },
        set: function (f) {
            var opts = this.options;
            opts.file = f;
            // TODO: Determine if this is necessary
            delete opts.source;
            this.parsed = false;
            this.generated = false;
        },
        enumerable: true
    },
    
    directory: { get: function () {
        return Path.dirname(this.file);
    }, enumerable: true },
    
    valueOf: { value: function () {
        return this.subject;
    } },
    
    toString: { value: function () {
        return this.source;
    } },
    
    toJSON: { value: function () {
        return this.subject;
    } }
}));