/*globals wrap*/

var Proteus     = require("proteus"),
    stringify   = require("../stringify"),
    isArray     = Array.isArray,
    CHILD_KEYS  = require("./child-keys")
;

/**
 * Update the node with the passed properties.
 * 
 * @param {Object} props the properties to update on the node
 * @returns {Object} the current instance
 */
function update (props) {
    var key;
    
    if (arguments.length > 1) {
        props = Proteus.map.apply(Proteus, arguments);
    }
    
    for (key in props) {
        this[key] = props[key];
    }
    
    return this;
}

/**
 * The individual child nodes, conveniently wrapper-ized.
 */
function getChildNodes () {
    var self = this,
        childKeys = CHILD_KEYS[this.type],
        children = []
    ;
    
    if (childKeys) {
        childKeys.forEach(function (key) {
            var child = self[key];

            if (isArray(child)) {
                child.forEach(function (c, idx) {
                    children.push(wrap(c, self));
                });
            }
            else if (child) {
                children.push(wrap(child, self));
            }
        });
    }
    
    return children;
}
/**
 * Get the code string for this node.
 * 
 * @method toString
 * @param {Object} opts optional options object to pass onto escodegen
 * @returns {String}
 */
function toString (opts) {
    return stringify(this, opts);
}

/**
 * Wraps a node-like object with utility functionality.
 * 
 * @function wrap
 * @param {Object} node the node to wrap
 * @param {Object} parent optional, the node's parent node.
 */
function wrap (node, parent) {
    // update the parent reference
    node.parent = parent;

    if (node.update === update) {
        return node;
    }
    
    // This is 5x faster
    node.update = update;
    node.getChildNodes = getChildNodes;
    node.toString = toString;
    // than this (1.8Ghz i7)
    // Object.defineProperties(node, {
    //     update: { value: update },
    //     getChildNodes: { value: getChildNodes },
    //     toString: { value: toString }
    // });
    
    return node;
}

module.exports = wrap;
