
var Proteus = require("proteus"),
    Ecgen   = require("escodegen")
;

/**
 * Take an ast and turn it into code.
 * 
 * Provide the ast as the first argument, or as a "ast" property of the
 * options argument.
 * 
 * @function stringify
 * @param {Object} ast optional, the ast to process
 * @param {Object} opts optional, an object with stringify options
 * @returns {String}
 */
function stringify (ast, opts) {
    var options = stringify.options,
        formatOpts,
        indentOpts
    ;
    
    if (!ast) {
        throw new Error("What do you want to stringify from?");
    }

    opts = opts || {};
    
    // Nested option-merging is a pain...
    formatOpts = opts.format || {};
    delete opts.format;
    
    indentOpts = formatOpts.indent || {};
    delete formatOpts.indent;
    
    opts = Proteus.merge({}, options, opts);
    opts.format = Proteus.merge({}, options.format, formatOpts);
    opts.format.indent = Proteus.merge({}, options.format.indent, indentOpts);
    
    return Ecgen.generate(ast.valueOf(), opts);
}

module.exports = Proteus.merge(stringify, {
    /**
     * The standard options used in constructing code from an AST.  See:
     * [escodegen API for
     * details](https://github.com/Constellation/escodegen/wiki/API)
     * 
     * @property {Object} options
     */
    options: {
        /**
         * @property {Object} options.format
         */
        format: {
            /**
             * @property {String} options.format.quotes
             */
            quotes: "single",
        },
        /**
         * @property {Boolean} options.comment
         */
        comment: true,
    }
});
