
var Proteus     = require('proteus'),
    Path        = require('path'),
    EM          = require('events').EventEmitter,
    InfuseAst   = require('infuse/ast'),
    NodeQuery   = require('infuse/ast/query'),
    NodeVisitor
;

module.exports = Proteus.Class.derive(Object.defineProperties({
    
    init: function (opts) {
        this.infusers = [];
        this.options = opts || {};
        Object.defineProperties(this, {
            __stack__: { value: [] }
        })
    },
    /**
     * @method use
     * @param {Object} obj
     * @param {Object} scope optional, scope to use when calling the above
     *      object's methods
     */
    use: function (obj, scope) {
        var infuser = { scope: scope || obj };
        
        infuser.queries = Object.keys(obj).map(function (key) {
            return {
                query:  new NodeQuery(key),
                fn:     obj[key]
            };
        });
        
        this.infusers.push(infuser);
    },
    /**
     * Execute the various infusers on the specified node.
     * 
     * @methods exec
     * @param {Object} node
     */
    exec: function (node) {
        this.infusers.forEach(function (infuser) {
            var scope = infuser.scope;
            
            infuser.queries.forEach(function (q) {
                if (q.query.test(node)) {
                    q.fn.call(scope, node, infuser);
                }
            });
        });
    },
    /**
     * @event enter
     * Traversal event when entering a node
     * @param {infuse.Ast.node} the node entered
     * @param {Infuser} the infuser instance
     */
    /**
     * @event leave
     * Traversal event when leaving a node
     * @param {infuse.Ast.node} the node left
     * @param {Infuser} the infuser instance
     */
    /**
     * @event start
     * Fired when the infuser first starts
     * @param {Infuser} the infuser instance
     */
    /**
     * @event begin
     * Fired when the infuser begins to process a sub-file
     * @param {Infuser} the infuser instance
     */
    /**
     * @event end
     * Fired when the infuser finishes processing a sub-file
     * @param {Infuser} the infuser instance
     */
    /**
     * @event complete
     * Fired when the infuser is done processing
     * @param {Infuser} the infuser instance
     */
    enter: function (node) {
        // TODO: capture scope stuff...
        this.emit('enter', node, this);
    },
    
    leave: function (node) {
        this.exec(node);
        this.emit('leave', node, this);
    },
    /**
     * Run the infuser against the ast parsed from filepath.
     * 
     * @method run
     * @param {String} filepath
     * @returns {Infuse.Ast} the ast instance
     */
    run: function (filepath) {
        var stack = this.__stack__,
            isComplete,
            ast
        ;
        
        ast = new InfuseAst({ file: filepath });
        stack.push(ast);
        
        isComplete = stack.length === 1;
        this.emit(isComplete ? 'start' : 'begin', this);
        ast.traverse(this);
        this.emit(isComplete ? 'complete' : 'end', this);
        
        stack.pop();
        
        return ast;
    }
}, {
    
    ast: { get: function () {
        var stack = this.__stack__;
        return stack[stack.length - 1];
    }, enumerable: true },
    
    file: { get: function () {
        return this.ast.options.file;
    }, enumerable: true},
    
    directory: { get: function () {
        return Path.dirname(this.file);
    }, enumerable: true},
    
    scope: {
        get: function () {
            
        },
        
        set: function (s) {
            
        },
        
        enumerable: true
    }
}));

module.exports.include(EM);
