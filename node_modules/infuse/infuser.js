
var Proteus = require("proteus"),
    NodeQuery = require("infuse/ast/query"),
    NodeVisitor
;

module.exports = Proteus.Class.derive(Object.defineProperties({
    
    init: function () {
        this.infusers = [];
    },
    /**
     * @method use
     * @param {Object} obj
     * @param {Object} scope optional, scope to use when calling the above
     *      object's methods
     */
    use: function (obj, scope) {
        var infuser = { scope: scope || obj };
        
        infuser.queries = Object.keys(obj).map(function (key) {
            return {
                query:  new NodeQuery(key),
                fn:     obj[key]
            };
        });
        
        this.infusers.push(infuser);
    },
    /**
     * Execute the various infusers on the specified node.
     * 
     * @methods exec
     * @param {Object} node
     */
    exec: function (node) {
        this.infusers.forEach(function (infuser) {
            var scope = infuser.scope;
            
            infuser.queries.forEach(function (q) {
                if (q.query.test(node)) {
                    q.fn.call(scope, node, infuser);
                }
            });
        });
    },
    
    
    enter: function (node) { },
    
    leave: Proteus.aliasMethod("exec"),
    
    run: function (ast) {
        ast.traverse(this);
        return this;
    }
}, {
    
    scope: {
        get: function () {
            
        },
        
        set: function (s) {
            
        },
        
        enumerable: true
    }
}));