
var Proteus = require("proteus"),
    NodeQuery = require("infuse/ast/query"),
    NodeVisitor
;

NodeVisitor = Proteus.Class.derive({
    
    init: function (infuser) {
        this.infuser = infuser;
    },
    
    enter: function (node) {
    },
    
    leave: function (node) {
        var infuser = this.infuser;
        
        infuser.infusers.forEach(function (inf) {
            var scope = inf.scope;
            
            inf.selectors.forEach(function (sel) {
                if (sel.query.test(node)) {
                    sel.fn.call(scope, node, infuser);
                }
            });
        });
    }
    
});

module.exports = Proteus.Class.derive(Object.defineProperties({
    
    init: function () {
        Object.defineProperties(this, {
            infusers: { value: [], enumerable: true }
        });
    },
    /**
     * @method use
     * @param {Object} obj
     * @param {Object} scope optional, scope to use when calling the above
     *      object's methods
     */
    use: function (obj, scope) {
        var infuser = { scope: scope || obj };
        
        infuser.selectors = Object.keys(obj).map(function (key) {
            return {
                query:  new NodeQuery(key),
                fn:     obj[key]
            };
        });
        
        this.infusers.push(infuser);
    },
    
    skip: function () {
        
    },
    
    break: function () {
        
    },
    
    revisit: function () {
        
    },
    
    run: function (ast) {
        ast.traverse(new NodeVisitor(this));
    }
}, {
    
    scope: {
        get: function () {
            
        },
        
        set: function (s) {
            
        },
        
        enumerable: true
    }
}));